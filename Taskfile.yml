# https://taskfile.dev

version: 3

vars:
  APPNAME: otel-inst-py
  DEP: ./...
  DOCKER_REG_PREFIX: ghcr.io
  OWNER: tombenke
  DOCKER_REG_USER: tombenke
  IMAGE_TAG: "{{.VERSION}}"
  VERSION:
    sh: git describe --tags --always  --abbrev=0 --match v* ${GITHUB_REF} | sed -e 's,.*/\(.*\),\1,'  | sed -e 's/^v//' || "latest"
  DOCKER_IMAGE_NAME: "{{.DOCKER_REG_PREFIX}}/{{.OWNER}}/{{.APPNAME}}:{{.IMAGE_TAG}}"
  DOCKER_IMAGE_NAME_LATEST: "{{.DOCKER_REG_PREFIX}}/{{.OWNER}}/{{.APPNAME}}:latest"
  GIT_HOOKS_DIR:
    sh: echo "$(pwd)/.git/hooks"

env:

tasks:
  default:
    desc: Executes all the tests then build the binary.
    cmds:
      - task: test
      - task: docs

  format:
    desc: Autoformat the source files
    cmds:
      - black .

  test:
    desc: Run all the tests.
    cmds:
      - task: format
      - task: dc-upd
      - sleep 60  # Waiting for docker containers to start
      - python -m unittest discover ./oti/tests/
      - task: run_examples
      - task: dc-down

  run_examples:
    desc: Run the examples
    cmds:
      - cd examples && python simple_trace_otlpgrpc_env.py
      - cd examples && python simple_trace_otlpgrpc.py
      - cd examples && python simple_trace_otlphttp_env.py
      - cd examples && python simple_trace_stdout_default_config.py
      - cd examples && python simple_trace_stdout_env.py
      - cd examples && python simple_trace_stdout.py
      - cd examples && python simple_trace_stdout_wo_sdk.py
      - cd examples && python simple_metrics_stdout_default_config.py
      - cd examples && python simple_metrics_otlpgrpc.py

  test-verbose:
    desc: Run all the go tests.
    cmds:
      - task: dc-upd
      - sleep 60  # Waiting for docker containers to start
      - task: format
      - python -m unittest discover ./oti/tests/ -v
      - task: dc-down

  coverage:
    desc: Test coverage
    cmds:
      - task: dc-upd
      - sleep 60  # Waiting for docker containers to start
      - coverage run -m unittest discover ./oti/tests/ -v
      - coverage html
      - coverage report
      - coverage-badge -f -o coverage.svg
      - task: dc-down

  lint:
    desc: Run python linter
    cmds:
      - task: format
      - pylint oti/
      - pylint oti/tests/
      - pylint examples/

  build:
    desc: Build
    cmds:
      - task: clean
      - VERSION={{.VERSION}} python -m build

  publish-package:
    desc: Publish the package to PyPI
    cmds:
      - twine upload -r pypi  dist/*

  pre-commit:
    desc: Runs the QA tasks from a git pre-commit hook
    cmds:
      - task: lint
      - task: coverage

  install-git-hooks:
    desc: Install git hooks
    cmds:
      - echo -e "#!/bin/bash\ntask pre-commit" > {{.GIT_HOOKS_DIR}}/pre-commit
      - chmod ug+x {{.GIT_HOOKS_DIR}}/pre-commit

  install:
    desc: Install the package and its dependencies
    cmds:
      - pip install .
      - task: install-git-hooks

  install-dev:
    desc: Install the package and its dependencies for development
    cmds:
      - pip install .[dev]
      - task: install-git-hooks

  install-dev-editable:
    desc: Install the package and its dependencies for development with editability
    cmds:
      - pip install -e .[dev]
      - task: install-git-hooks

  docs:
    desc: Generate module documentation into the docs/ folder
    cmds:
      - echo {{.VERSION}}
      - task: dc-upd
      - sleep 60  # Waiting for docker containers to start
      - pdoc -o docs -d google oti/ examples/ --footer-text="otel-inst-py/oti {{.VERSION}}"
      - task: dc-down

  clean:
    desc: Clean temporary files and folders
    cmds:
      - rm .coverage -f
      - rm htmlcov -fr
      - rm docs/* -fr
      - rm dist/* -fr

  dc-up:
    desc: Start docker containers
    cmds:
      - docker compose -f docker-compose.test.yml up
      - sleep 10

  dc-upd:
    desc: Start docker containers in the background
    cmds:
      - docker compose -f docker-compose.test.yml up -d

  dc-stop:
    desc: Stop docker containers
    cmds:
      - docker compose stop

  dc-logs:
    desc: Get all docker container logs
    cmds:
      - docker compose -f docker-compose.test.yml logs

  dc-logsf:
    desc: Get all docker container logs and follow
    cmds:
      - docker compose -f docker-compose.test.yml logs -f

  dc-down:
    desc: Clean up docker containers
    cmds:
      - docker compose -f docker-compose.test.yml down --volumes --remove-orphans

  venv-create:
    desc: Create a new Python Virtual Environment under the local folder
    cmds:
      - python3.11 -m venv ./venv
